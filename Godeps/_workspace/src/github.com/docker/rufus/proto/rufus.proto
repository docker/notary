syntax = "proto3";

package proto;

// KeyManagement Interface
service KeyManagement {

  // CreateKey creates as asymmetric key pair and returns the PublicKey
  rpc CreateKey(Void) returns (PublicKey) {}

  // DeleteKey deletes the key associated with a keyID
  rpc DeleteKey(KeyID) returns (Void) {}

  // GetKeyInfo returns the PublicKey associated with a keyID
  rpc GetKeyInfo(KeyID) returns (PublicKey) {}
}

// Signer Interface
service Signer {
  // Sign calculates a cryptographic signature using the Key associated with a KeyID and returns the signature
  rpc Sign(SignatureRequest) returns (Signature) {}
}

// KeyID holds an ID that is used to reference the key
message KeyID {
  string ID = 1;
}

// Type holds the type of crypto algorithm used
message Algorithm {
  string algorithm = 1;
}

// PublicKey has a KeyID that is used to reference the key, the key type, and opaque bytes of a publicKey
message PublicKey {
  KeyID keyID = 1;
  Algorithm algorithm = 2;
  bytes publicKey = 3;
}

// Signature specifies a KeyID that was used for signing, the key type, and signed content
message Signature {
  KeyID keyID = 1;
  Algorithm algorithm = 2;
  bytes content = 3;
}

// SignatureRequests specifies a KeyID for signing, the type of signature requested, and content to be signed
message SignatureRequest {
  KeyID keyID = 1;
  Algorithm algorithm = 2;
  bytes content = 3;
}

// Void represents an empty message type
message Void {
}
