syntax = "proto3";

package proto;

// KeyManagement Interface
service KeyManagement {

  // CreateKey creates as asymmetric key pair and returns the PublicKey
  rpc CreateKey(Algorithm) returns (PublicKey) {}

  // DeleteKey deletes the key associated with a KeyInfo
  rpc DeleteKey(KeyInfo) returns (Void) {}

  // GetKeyInfo returns the PublicKey associated with a KeyInfo
  rpc GetKeyInfo(KeyInfo) returns (PublicKey) {}
}

// Signer Interface
service Signer {
  // Sign calculates a cryptographic signature using the Key associated with a KeyInfo and returns the signature
  rpc Sign(SignatureRequest) returns (Signature) {}
}

// KeyInfo holds an ID that is used to reference the key and it's algorithm
message KeyInfo {
  string ID = 1;
  Algorithm algorithm = 2;
}

// Type holds the type of crypto algorithm used
message Algorithm {
  string algorithm = 1;
}

// PublicKey has a KeyInfo that is used to reference the key, and opaque bytes of a publicKey
message PublicKey {
  KeyInfo keyInfo = 1;
  bytes publicKey = 2;
}

// Signature specifies a KeyInfo that was used for signing and signed content
message Signature {
  KeyInfo keyInfo = 1;
  bytes content = 2;
}

// SignatureRequests specifies a KeyInfo, and content to be signed
message SignatureRequest {
  KeyInfo keyInfo = 1;
  bytes content = 2;
}

// Void represents an empty message type
message Void {
}
