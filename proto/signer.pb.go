// Code generated by protoc-gen-go.
// source: proto/signer.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// KeyInfo holds a KeyID that is used to reference the key and it's algorithm
type KeyInfo struct {
	KeyID     *KeyID     `protobuf:"bytes,1,opt,name=keyID" json:"keyID,omitempty"`
	Algorithm *Algorithm `protobuf:"bytes,2,opt,name=algorithm" json:"algorithm,omitempty"`
}

func (m *KeyInfo) Reset()                    { *m = KeyInfo{} }
func (m *KeyInfo) String() string            { return proto1.CompactTextString(m) }
func (*KeyInfo) ProtoMessage()               {}
func (*KeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *KeyInfo) GetKeyID() *KeyID {
	if m != nil {
		return m.KeyID
	}
	return nil
}

func (m *KeyInfo) GetAlgorithm() *Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

// KeyID holds an ID that is used to reference the key
type KeyID struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *KeyID) Reset()                    { *m = KeyID{} }
func (m *KeyID) String() string            { return proto1.CompactTextString(m) }
func (*KeyID) ProtoMessage()               {}
func (*KeyID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Type holds the type of crypto algorithm used
type Algorithm struct {
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm" json:"algorithm,omitempty"`
}

func (m *Algorithm) Reset()                    { *m = Algorithm{} }
func (m *Algorithm) String() string            { return proto1.CompactTextString(m) }
func (*Algorithm) ProtoMessage()               {}
func (*Algorithm) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

// PublicKey has a KeyInfo that is used to reference the key, and opaque bytes of a publicKey
type PublicKey struct {
	KeyInfo   *KeyInfo `protobuf:"bytes,1,opt,name=keyInfo" json:"keyInfo,omitempty"`
	PublicKey []byte   `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (m *PublicKey) Reset()                    { *m = PublicKey{} }
func (m *PublicKey) String() string            { return proto1.CompactTextString(m) }
func (*PublicKey) ProtoMessage()               {}
func (*PublicKey) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PublicKey) GetKeyInfo() *KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

// Signature specifies a KeyInfo that was used for signing and signed content
type Signature struct {
	KeyInfo   *KeyInfo   `protobuf:"bytes,1,opt,name=keyInfo" json:"keyInfo,omitempty"`
	Algorithm *Algorithm `protobuf:"bytes,2,opt,name=algorithm" json:"algorithm,omitempty"`
	Content   []byte     `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto1.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Signature) GetKeyInfo() *KeyInfo {
	if m != nil {
		return m.KeyInfo
	}
	return nil
}

func (m *Signature) GetAlgorithm() *Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

// SignatureRequests specifies a KeyInfo, and content to be signed
type SignatureRequest struct {
	KeyID   *KeyID `protobuf:"bytes,1,opt,name=keyID" json:"keyID,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *SignatureRequest) Reset()                    { *m = SignatureRequest{} }
func (m *SignatureRequest) String() string            { return proto1.CompactTextString(m) }
func (*SignatureRequest) ProtoMessage()               {}
func (*SignatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SignatureRequest) GetKeyID() *KeyID {
	if m != nil {
		return m.KeyID
	}
	return nil
}

// Void represents an empty message type
type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto1.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

// A mapping of health check name to the check result message
type HealthStatus struct {
	Status map[string]string `protobuf:"bytes,1,rep,name=status" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HealthStatus) Reset()                    { *m = HealthStatus{} }
func (m *HealthStatus) String() string            { return proto1.CompactTextString(m) }
func (*HealthStatus) ProtoMessage()               {}
func (*HealthStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *HealthStatus) GetStatus() map[string]string {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto1.RegisterType((*KeyInfo)(nil), "proto.KeyInfo")
	proto1.RegisterType((*KeyID)(nil), "proto.KeyID")
	proto1.RegisterType((*Algorithm)(nil), "proto.Algorithm")
	proto1.RegisterType((*PublicKey)(nil), "proto.PublicKey")
	proto1.RegisterType((*Signature)(nil), "proto.Signature")
	proto1.RegisterType((*SignatureRequest)(nil), "proto.SignatureRequest")
	proto1.RegisterType((*Void)(nil), "proto.Void")
	proto1.RegisterType((*HealthStatus)(nil), "proto.HealthStatus")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for KeyManagement service

type KeyManagementClient interface {
	// CreateKey creates as asymmetric key pair and returns the PublicKey
	CreateKey(ctx context.Context, in *Algorithm, opts ...grpc.CallOption) (*PublicKey, error)
	// DeleteKey deletes the key associated with a KeyID
	DeleteKey(ctx context.Context, in *KeyID, opts ...grpc.CallOption) (*Void, error)
	// GetKeyInfo returns the PublicKey associated with a KeyID
	GetKeyInfo(ctx context.Context, in *KeyID, opts ...grpc.CallOption) (*PublicKey, error)
	// CheckHealth returns the HealthStatus with the service
	CheckHealth(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthStatus, error)
}

type keyManagementClient struct {
	cc *grpc.ClientConn
}

func NewKeyManagementClient(cc *grpc.ClientConn) KeyManagementClient {
	return &keyManagementClient{cc}
}

func (c *keyManagementClient) CreateKey(ctx context.Context, in *Algorithm, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := grpc.Invoke(ctx, "/proto.KeyManagement/CreateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementClient) DeleteKey(ctx context.Context, in *KeyID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/proto.KeyManagement/DeleteKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementClient) GetKeyInfo(ctx context.Context, in *KeyID, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := grpc.Invoke(ctx, "/proto.KeyManagement/GetKeyInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagementClient) CheckHealth(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := grpc.Invoke(ctx, "/proto.KeyManagement/CheckHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyManagement service

type KeyManagementServer interface {
	// CreateKey creates as asymmetric key pair and returns the PublicKey
	CreateKey(context.Context, *Algorithm) (*PublicKey, error)
	// DeleteKey deletes the key associated with a KeyID
	DeleteKey(context.Context, *KeyID) (*Void, error)
	// GetKeyInfo returns the PublicKey associated with a KeyID
	GetKeyInfo(context.Context, *KeyID) (*PublicKey, error)
	// CheckHealth returns the HealthStatus with the service
	CheckHealth(context.Context, *Void) (*HealthStatus, error)
}

func RegisterKeyManagementServer(s *grpc.Server, srv KeyManagementServer) {
	s.RegisterService(&_KeyManagement_serviceDesc, srv)
}

func _KeyManagement_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Algorithm)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeyManagementServer).CreateKey(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _KeyManagement_DeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(KeyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeyManagementServer).DeleteKey(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _KeyManagement_GetKeyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(KeyID)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeyManagementServer).GetKeyInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _KeyManagement_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(KeyManagementServer).CheckHealth(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _KeyManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KeyManagement",
	HandlerType: (*KeyManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _KeyManagement_CreateKey_Handler,
		},
		{
			MethodName: "DeleteKey",
			Handler:    _KeyManagement_DeleteKey_Handler,
		},
		{
			MethodName: "GetKeyInfo",
			Handler:    _KeyManagement_GetKeyInfo_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _KeyManagement_CheckHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Signer service

type SignerClient interface {
	// Sign calculates a cryptographic signature using the Key associated with a KeyID and returns the signature
	Sign(ctx context.Context, in *SignatureRequest, opts ...grpc.CallOption) (*Signature, error)
	// CheckHealth returns the HealthStatus with the service
	CheckHealth(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthStatus, error)
}

type signerClient struct {
	cc *grpc.ClientConn
}

func NewSignerClient(cc *grpc.ClientConn) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) Sign(ctx context.Context, in *SignatureRequest, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := grpc.Invoke(ctx, "/proto.Signer/Sign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerClient) CheckHealth(ctx context.Context, in *Void, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := grpc.Invoke(ctx, "/proto.Signer/CheckHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Signer service

type SignerServer interface {
	// Sign calculates a cryptographic signature using the Key associated with a KeyID and returns the signature
	Sign(context.Context, *SignatureRequest) (*Signature, error)
	// CheckHealth returns the HealthStatus with the service
	CheckHealth(context.Context, *Void) (*HealthStatus, error)
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SignerServer).Sign(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Signer_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SignerServer).CheckHealth(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _Signer_Sign_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _Signer_CheckHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0xc5, 0x80, 0x8d, 0x76, 0x0c, 0x2d, 0x1d, 0x0e, 0x45, 0xae, 0x54, 0x2a, 0xf7, 0xc2, 0xa5,
	0x46, 0xc0, 0xa5, 0xea, 0xa5, 0x89, 0x20, 0x4a, 0x22, 0x14, 0x29, 0x0a, 0x52, 0xee, 0x86, 0x4c,
	0xc0, 0xc2, 0xd8, 0xc4, 0x5e, 0x47, 0xe2, 0x57, 0xe6, 0x2f, 0x65, 0xbd, 0x6b, 0x5b, 0x26, 0x41,
	0x49, 0x94, 0xd3, 0xce, 0xc7, 0xdb, 0x37, 0xef, 0xcd, 0x2e, 0xe0, 0x2e, 0x0a, 0x79, 0x38, 0x88,
	0xbd, 0x55, 0x40, 0x91, 0x23, 0x13, 0xd4, 0xe5, 0x61, 0xcf, 0xa0, 0x31, 0xa3, 0xfd, 0x65, 0x70,
	0x1f, 0xe2, 0x0f, 0xd0, 0x37, 0x22, 0x9c, 0x76, 0xb5, 0x5f, 0x5a, 0xdf, 0x1c, 0x35, 0x15, 0xd0,
	0x49, 0xdb, 0x53, 0xfc, 0x0d, 0xcc, 0xf5, 0x57, 0x61, 0xe4, 0xf1, 0xf5, 0xb6, 0x5b, 0x95, 0x80,
	0x76, 0x06, 0x38, 0xcd, 0xeb, 0x76, 0x07, 0x74, 0x85, 0x06, 0xa8, 0x66, 0x3c, 0xcc, 0xfe, 0x09,
	0xac, 0x40, 0xe0, 0xb7, 0x32, 0x8d, 0xea, 0xff, 0x07, 0x76, 0x9d, 0x2c, 0x7c, 0x6f, 0x29, 0xae,
	0x62, 0x0f, 0x1a, 0x1b, 0x25, 0x27, 0x53, 0xf1, 0xa5, 0xa4, 0x22, 0x15, 0x29, 0x08, 0x76, 0x39,
	0x5a, 0xea, 0x68, 0xda, 0x0b, 0x60, 0x73, 0xe1, 0xcc, 0xe5, 0x49, 0x44, 0xef, 0x13, 0x7c, 0xc4,
	0x08, 0x7e, 0x85, 0xc6, 0x32, 0x0c, 0x38, 0x05, 0xbc, 0x5b, 0x93, 0x33, 0x4e, 0xa0, 0x5d, 0xcc,
	0xb8, 0xa1, 0x87, 0x84, 0x62, 0xfe, 0xf6, 0xbe, 0x4a, 0x0c, 0x4a, 0xa5, 0x01, 0xf5, 0xdb, 0xd0,
	0xbb, 0xb3, 0x03, 0x68, 0x5e, 0x90, 0xeb, 0xf3, 0xf5, 0x9c, 0x0b, 0xb6, 0x18, 0x07, 0x60, 0xc4,
	0x32, 0x12, 0x34, 0x35, 0x41, 0xd3, 0xcb, 0x68, 0xca, 0x20, 0x47, 0x1d, 0x67, 0x01, 0x8f, 0xf6,
	0xd6, 0x1f, 0x30, 0x4b, 0x29, 0x9a, 0x50, 0x13, 0x2a, 0xd4, 0x2e, 0xb1, 0x05, 0xfa, 0xa3, 0xeb,
	0x27, 0x24, 0x67, 0xb2, 0x7f, 0xd5, 0xbf, 0xda, 0xe8, 0x49, 0x83, 0x96, 0x90, 0x74, 0xe5, 0x06,
	0xee, 0x8a, 0xb6, 0x42, 0x0f, 0x0e, 0x81, 0x4d, 0x22, 0x72, 0x39, 0xa5, 0x0b, 0x7f, 0xe5, 0xdd,
	0xca, 0x2b, 0xc5, 0xa3, 0xd8, 0x15, 0xec, 0x03, 0x9b, 0x92, 0x4f, 0xea, 0xca, 0x81, 0x51, 0xcb,
	0xcc, 0x32, 0x69, 0xae, 0x82, 0x0e, 0xc0, 0x39, 0xf1, 0x7c, 0xd9, 0x87, 0xd0, 0x63, 0xcc, 0x43,
	0x30, 0x27, 0x6b, 0x5a, 0x6e, 0x94, 0x5d, 0x2c, 0xb3, 0x59, 0x9d, 0x23, 0xab, 0xb0, 0x2b, 0xa3,
	0x1d, 0x18, 0x73, 0xf9, 0x93, 0x71, 0x0c, 0xf5, 0x34, 0xc2, 0xef, 0x19, 0xf0, 0xe5, 0x13, 0x15,
	0x13, 0x8b, 0xc6, 0xa7, 0x26, 0x2e, 0x0c, 0x59, 0x1d, 0x3f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x5f,
	0x9e, 0x66, 0xe1, 0x48, 0x03, 0x00, 0x00,
}
